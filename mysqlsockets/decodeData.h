#ifndef __DECODE_DATA_H__#define __DECODE_DATA_H__#include <string>#include <iostream>#include <vector>#include <json/json.h>#include<mysql/mysql.h>#include <time.h>#include "client.h"typedef unsigned char BYTE;class StrToByte{public:/***time:20180719*author:yl*version:1.0*stringToBytes:把字符串转换成字节数据*/	bool stringToBytes(const std::string &str);/***time:20180719*author:yl*version:1.0*showHex:输出16进制数据*/	bool showHex(std::vector<BYTE> &bytesbuffer);/*字节数据缓存*/	std::vector<BYTE> bytesBuffer;};

class DataInfo{public:	DataInfo(){		init();	}	~DataInfo()=default;	/*接收时间*/	int recvtime;		/*数据包时间*/	int packtime;		/*飞机编号*/	int planeid;		/*飞行员编号*/	int pilotid;	/*设备类型编号*/	int devtypeid;		/*数据源ip地址*/	std::string ipaddr;	/*原始数据*/	std::string data;		/*设备编号*/	std::string devid;		/*解码数据*/	std::string decodedata;//解码数据	std::string protocol;		void init(void){		recvtime = 0;		packtime = 0;		pilotid = 0;		planeid = 0;		devtypeid = 0;		ipaddr.clear();		data.clear();		devid.clear();		decodedata.clear();		protocol.clear();	}private:	DataInfo(const DataInfo&);	DataInfo&operator=(const DataInfo&);};class RealTimeData:public DataInfo{public://	friend class SSFX;	enum RET_JOSN_T{XC,SC,RW,ERR};/*用于存储数据的唯一接口*/		bool saveToTable(MYSQL&sqlfd,Json::Value &root);/*把解码字符串数据，把字符串数据转成hex，然后调解码库*/	bool decodeStringData(const Json::Value &data);	RealTimeData(void):tm(NULL){		maxBufferLen = sizeof(querybuffer);	}		~RealTimeData(void)=default;private:/*解析json数据*/	bool parseJsonData(MYSQL &sqlfd,const Json::Value &root);/*把解码字符串数据，把字符串数据转成hex，然后调解码库*///	bool decodeStringData(const Json::Value &data);/*调用解码库*/	bool decodeByteMsg(const std::vector<BYTE> &buf);/*获取数据类型:XC,SC,RW*/	RET_JOSN_T dataType(const Json::Value &data);/*查表*/	bool select_dev_table(MYSQL &sqlfd,const std::string &ipaddr); 		char querybuffer[2048];//暂时用栈内存	int maxBufferLen;		struct tm *tm;	Json::FastWriter w;	/*赋值运算符*/		RealTimeData&operator=(const RealTimeData&);/*拷贝构造*/		RealTimeData(const RealTimeData&);};class SSFX{public:	/***time:20180718*author:yl*version:1.0*note:单例类，多线程不安全*/	static SSFX*getInstance(void);/***time:20180718*author:yl*version:1.0*fun:存储并且转发给客户端*@sqlf:查询数据库句柄*@root:json数据*@manageCli:客户端管理*/	bool saveAndTransmit(MYSQL&sqlfd,Json::Value &root,const ManageClients&manageCli);	void destoryInst(void);private:/*数据打包转发给web客户端*/	bool transToWebClient(const ManageClients&manageCli);		RealTimeData rtData;		static SSFX * instance;	SSFX(const SSFX&);		SSFX &operator=(const SSFX&);	SSFX(){}	~SSFX(){}};
#endif